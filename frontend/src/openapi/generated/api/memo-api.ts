/* tslint:disable */
/* eslint-disable */
/**
 * Zete
 * 메모 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChangeImportantInput } from '../model';
// @ts-ignore
import { ChangeImportantOutput } from '../model';
// @ts-ignore
import { CoreOutput } from '../model';
// @ts-ignore
import { CreateCategoryInput } from '../model';
// @ts-ignore
import { CreateCategoryOutput } from '../model';
// @ts-ignore
import { CreateMemoInput } from '../model';
// @ts-ignore
import { CreateMemoOutput } from '../model';
// @ts-ignore
import { DeleteCategoryInput } from '../model';
// @ts-ignore
import { DeleteMemoInput } from '../model';
// @ts-ignore
import { GetCategoriesOutput } from '../model';
// @ts-ignore
import { GetMemoInput } from '../model';
// @ts-ignore
import { GetMemoOutput } from '../model';
// @ts-ignore
import { SearchMemosInput } from '../model';
// @ts-ignore
import { SearchMemosOutput } from '../model';
// @ts-ignore
import { UpdateCategoryInput } from '../model';
// @ts-ignore
import { UpdateMemoInput } from '../model';
// @ts-ignore
import { UpdateMemoOutput } from '../model';
/**
 * MemoApi - axios parameter creator
 * @export
 */
export const MemoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangeImportantInput} changeImportantInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeImportant: async (changeImportantInput: ChangeImportantInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeImportantInput' is not null or undefined
            assertParamExists('changeImportant', 'changeImportantInput', changeImportantInput)
            const localVarPath = `/memo/changeImportant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeImportantInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCategoryInput} createCategoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (createCategoryInput: CreateCategoryInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryInput' is not null or undefined
            assertParamExists('createCategory', 'createCategoryInput', createCategoryInput)
            const localVarPath = `/memo/createCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMemoInput} createMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemo: async (createMemoInput: CreateMemoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMemoInput' is not null or undefined
            assertParamExists('createMemo', 'createMemoInput', createMemoInput)
            const localVarPath = `/memo/createMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMemoInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteCategoryInput} deleteCategoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (deleteCategoryInput: DeleteCategoryInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCategoryInput' is not null or undefined
            assertParamExists('deleteCategory', 'deleteCategoryInput', deleteCategoryInput)
            const localVarPath = `/memo/deleteCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCategoryInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteMemoInput} deleteMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemo: async (deleteMemoInput: DeleteMemoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteMemoInput' is not null or undefined
            assertParamExists('deleteMemo', 'deleteMemoInput', deleteMemoInput)
            const localVarPath = `/memo/deleteMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMemoInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/memo/getCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetMemoInput} getMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemo: async (getMemoInput: GetMemoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getMemoInput' is not null or undefined
            assertParamExists('getMemo', 'getMemoInput', getMemoInput)
            const localVarPath = `/memo/getMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getMemoInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchMemosInput} searchMemosInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMemos: async (searchMemosInput: SearchMemosInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchMemosInput' is not null or undefined
            assertParamExists('searchMemos', 'searchMemosInput', searchMemosInput)
            const localVarPath = `/memo/searchMemos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchMemosInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateCategoryInput} updateCategoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (updateCategoryInput: UpdateCategoryInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCategoryInput' is not null or undefined
            assertParamExists('updateCategory', 'updateCategoryInput', updateCategoryInput)
            const localVarPath = `/memo/updateCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateMemoInput} updateMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemo: async (updateMemoInput: UpdateMemoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMemoInput' is not null or undefined
            assertParamExists('updateMemo', 'updateMemoInput', updateMemoInput)
            const localVarPath = `/memo/updateMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMemoInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemoApi - functional programming interface
 * @export
 */
export const MemoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangeImportantInput} changeImportantInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeImportant(changeImportantInput: ChangeImportantInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeImportantOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeImportant(changeImportantInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCategoryInput} createCategoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(createCategoryInput: CreateCategoryInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCategoryOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(createCategoryInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateMemoInput} createMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMemo(createMemoInput: CreateMemoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMemoOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMemo(createMemoInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteCategoryInput} deleteCategoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(deleteCategoryInput: DeleteCategoryInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategoriesOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(deleteCategoryInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteMemoInput} deleteMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMemo(deleteMemoInput: DeleteMemoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMemo(deleteMemoInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategoriesOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetMemoInput} getMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemo(getMemoInput: GetMemoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMemoOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemo(getMemoInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SearchMemosInput} searchMemosInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMemos(searchMemosInput: SearchMemosInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchMemosOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMemos(searchMemosInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateCategoryInput} updateCategoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(updateCategoryInput: UpdateCategoryInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(updateCategoryInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateMemoInput} updateMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemo(updateMemoInput: UpdateMemoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMemoOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemo(updateMemoInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemoApi - factory interface
 * @export
 */
export const MemoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemoApiFp(configuration)
    return {
        /**
         * 
         * @param {ChangeImportantInput} changeImportantInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeImportant(changeImportantInput: ChangeImportantInput, options?: any): AxiosPromise<ChangeImportantOutput> {
            return localVarFp.changeImportant(changeImportantInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCategoryInput} createCategoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(createCategoryInput: CreateCategoryInput, options?: any): AxiosPromise<CreateCategoryOutput> {
            return localVarFp.createCategory(createCategoryInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateMemoInput} createMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemo(createMemoInput: CreateMemoInput, options?: any): AxiosPromise<CreateMemoOutput> {
            return localVarFp.createMemo(createMemoInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteCategoryInput} deleteCategoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(deleteCategoryInput: DeleteCategoryInput, options?: any): AxiosPromise<GetCategoriesOutput> {
            return localVarFp.deleteCategory(deleteCategoryInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteMemoInput} deleteMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemo(deleteMemoInput: DeleteMemoInput, options?: any): AxiosPromise<CoreOutput> {
            return localVarFp.deleteMemo(deleteMemoInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: any): AxiosPromise<GetCategoriesOutput> {
            return localVarFp.getCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetMemoInput} getMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemo(getMemoInput: GetMemoInput, options?: any): AxiosPromise<GetMemoOutput> {
            return localVarFp.getMemo(getMemoInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchMemosInput} searchMemosInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMemos(searchMemosInput: SearchMemosInput, options?: any): AxiosPromise<SearchMemosOutput> {
            return localVarFp.searchMemos(searchMemosInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateCategoryInput} updateCategoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(updateCategoryInput: UpdateCategoryInput, options?: any): AxiosPromise<CoreOutput> {
            return localVarFp.updateCategory(updateCategoryInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateMemoInput} updateMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemo(updateMemoInput: UpdateMemoInput, options?: any): AxiosPromise<UpdateMemoOutput> {
            return localVarFp.updateMemo(updateMemoInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemoApi - object-oriented interface
 * @export
 * @class MemoApi
 * @extends {BaseAPI}
 */
export class MemoApi extends BaseAPI {
    /**
     * 
     * @param {ChangeImportantInput} changeImportantInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public changeImportant(changeImportantInput: ChangeImportantInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).changeImportant(changeImportantInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCategoryInput} createCategoryInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public createCategory(createCategoryInput: CreateCategoryInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).createCategory(createCategoryInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateMemoInput} createMemoInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public createMemo(createMemoInput: CreateMemoInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).createMemo(createMemoInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteCategoryInput} deleteCategoryInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public deleteCategory(deleteCategoryInput: DeleteCategoryInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).deleteCategory(deleteCategoryInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteMemoInput} deleteMemoInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public deleteMemo(deleteMemoInput: DeleteMemoInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).deleteMemo(deleteMemoInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public getCategories(options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetMemoInput} getMemoInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public getMemo(getMemoInput: GetMemoInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).getMemo(getMemoInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchMemosInput} searchMemosInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public searchMemos(searchMemosInput: SearchMemosInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).searchMemos(searchMemosInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateCategoryInput} updateCategoryInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public updateCategory(updateCategoryInput: UpdateCategoryInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).updateCategory(updateCategoryInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateMemoInput} updateMemoInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public updateMemo(updateMemoInput: UpdateMemoInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).updateMemo(updateMemoInput, options).then((request) => request(this.axios, this.basePath));
    }
}
